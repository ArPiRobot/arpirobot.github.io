{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ArPiRobot Welcome to the ArPiRobot home page. About ArPiRobot is a simple robotics framework built around a control system consisting primarily of a Raspberry Pi and an Arduino. License All the source code for all components of ArPiRobot is currently not released, however will soon be released, likely under the GNU General Public License v3.0. Until then, no part of this work is to be used or distributed in any way, shape, or form except by the author (Marcus Behel).","title":"ArPiRobot"},{"location":"#arpirobot","text":"Welcome to the ArPiRobot home page.","title":"ArPiRobot"},{"location":"#about","text":"ArPiRobot is a simple robotics framework built around a control system consisting primarily of a Raspberry Pi and an Arduino.","title":"About"},{"location":"#license","text":"All the source code for all components of ArPiRobot is currently not released, however will soon be released, likely under the GNU General Public License v3.0. Until then, no part of this work is to be used or distributed in any way, shape, or form except by the author (Marcus Behel).","title":"License"},{"location":"downloads/","text":"Downloads ArPiRobot Images Release Date Image Version Python Version Download 8-10-19 Beta1 3.5 Download When downloading updates, the Drive Station, the Deploy Tool, and the Arduino Firmware, make sure the versions you download are compatible with the image you are using. The release notes for each component (visible with the download) will list compatible image versions. ArPiRobot Updates Updates can be downloaded from GitHub . There are two update zips for each update: A robot update zip (to be installed on the robot with the Deploy Tool) and a development update (to be installed on the development computer using the containd installer scripts). Drive Station The Drive Station can be downloaded form GitHub . Each release has three files: A windows installer (.exe), a macOS package (.zip), and a universal Java archive (.jar). The Windows installers and macOS packages install Java with the Drive Station, however if you are using the JAR (usually on Linux or *BSD), it is necessary to also install Java (11 or newer). It is recommended to use distribution packages for Linux and BSDs. If using the JAR on macOS or Windows, it is recommended to use AdoptOpenJDK packages. Deploy Tool The Deploy Tool can be downloaded form GitHub . Each release has three files: A windows installer (.exe), a macOS package (.zip), and a universal Java archive (.jar). The Windows installers and macOS packages install Java with the Deploy Tool, however if you are using the JAR (usually on Linux or *BSD), it is necessary to also install Java (11 or newer). It is recommended to use distribution packages for Linux and BSDs. If using the JAR on macOS or Windows, it is recommended to use AdoptOpenJDK packages. Arduino Firmware The ArPiRobot Arduino firmware can be downloaded from GitHub . It is necessary to install the Arduino IDE (Not the online version) to build and upload the project to an Arduino compatible board. If using a Teensy board it is also necessary to install Teensyduino . ArPiRobot VSCode Extension The ArPiRobot Arduino firmware can be downloaded from GitHub .","title":"Downloads"},{"location":"downloads/#downloads","text":"","title":"Downloads"},{"location":"downloads/#arpirobot-images","text":"Release Date Image Version Python Version Download 8-10-19 Beta1 3.5 Download When downloading updates, the Drive Station, the Deploy Tool, and the Arduino Firmware, make sure the versions you download are compatible with the image you are using. The release notes for each component (visible with the download) will list compatible image versions.","title":"ArPiRobot Images"},{"location":"downloads/#arpirobot-updates","text":"Updates can be downloaded from GitHub . There are two update zips for each update: A robot update zip (to be installed on the robot with the Deploy Tool) and a development update (to be installed on the development computer using the containd installer scripts).","title":"ArPiRobot Updates"},{"location":"downloads/#drive-station","text":"The Drive Station can be downloaded form GitHub . Each release has three files: A windows installer (.exe), a macOS package (.zip), and a universal Java archive (.jar). The Windows installers and macOS packages install Java with the Drive Station, however if you are using the JAR (usually on Linux or *BSD), it is necessary to also install Java (11 or newer). It is recommended to use distribution packages for Linux and BSDs. If using the JAR on macOS or Windows, it is recommended to use AdoptOpenJDK packages.","title":"Drive Station"},{"location":"downloads/#deploy-tool","text":"The Deploy Tool can be downloaded form GitHub . Each release has three files: A windows installer (.exe), a macOS package (.zip), and a universal Java archive (.jar). The Windows installers and macOS packages install Java with the Deploy Tool, however if you are using the JAR (usually on Linux or *BSD), it is necessary to also install Java (11 or newer). It is recommended to use distribution packages for Linux and BSDs. If using the JAR on macOS or Windows, it is recommended to use AdoptOpenJDK packages.","title":"Deploy Tool"},{"location":"downloads/#arduino-firmware","text":"The ArPiRobot Arduino firmware can be downloaded from GitHub . It is necessary to install the Arduino IDE (Not the online version) to build and upload the project to an Arduino compatible board. If using a Teensy board it is also necessary to install Teensyduino .","title":"Arduino Firmware"},{"location":"downloads/#arpirobot-vscode-extension","text":"The ArPiRobot Arduino firmware can be downloaded from GitHub .","title":"ArPiRobot VSCode Extension"},{"location":"advanced/buildminimage/","text":"Building an ArPiRobot Image This guide details how the prebuilt minimal Raspbian image is created for ArPiRobot robots. This guide exists mostly to document the image creation process, but can be followed to create a custom Raspbian image or an image with another Linux OS. The minimal image configured should be used when development will not be done on the robot or when the robot may be powered off unexpectedly. Why a Custom Image? There are few reasons to ever need a custom image. Most users do not need to spend the time creating their own image. The most common reasons for wanting to build a custom image are: If you want to use or test a newer version of Raspbian that the prebuilt image uses. If you want to use a different Linux OS (not Raspbian). If you want to understand more about how all the components of this project fit together. It is important to be aware that this guide is only up to date for the version of Raspbian that was used to make the prebuilt image. There will likely be slight differences if using another version of Raspbian or another Linux OS. Some important things to remember if using another Linux OS: there must be a pi user (or systemd services must be edited) and the pi user (or whatever user is used with the deploy tool) must be able to use sudo with no password. Raspbian Version This guide is currently up to data for Raspbian Lite version 2019-04-09. The resulting image has been tested on a Raspberry Pi Zero W and a Raspberry Pi 3A+. Base Raspbian Install Download the Raspbian Image from here . If the correct version is no longer available it is likely OK to use a newer version, but older images can be found here . Download and install balenaEtcher Install balenaEtcher Insert the SD Card into an SD Card slot on your PC or connect it using a USB adapter. Run balenaEtcher Select the downloaded raspbian image Select the destination SD Card Click flash and wait for it to finish Once it finishes remove and re-insert the card to mount the boot partition. Edit the config.txt file and add the following line at the end. This will enable the serial console which can help with setup of the image and with debugging robot code or network issues while in use on a robot. enable_uart=1 Finally, move the SD Card into the Pi, connect keyboard, mouse, monitor and power on the pi. Automatic process Instead of following the instructions below, the work-in-progress configuration scripts can be used, but make sure to double check them! Once done with the scripts be sure to delete the downloaded/cloned repo. Also make sure to run each and every script and in order . If something goes wrong you will likely have to start over. After running the scripts it is recommeded to delete the github repo for the scripts (from /home/pi ) and to delete the log files from /root/ . After doing so clear bash history again. To view the script log (live) sudo tail -f /root/setup_log.txt Everything that follows is the manual setup instructions. Readonly Filesystem Tested using commit 1b596c2ced2a6ad87347cbb8faa675f20ec7af52 of rpi-readonly project. The readonly filesystem should be configured on a clean install of Raspbian Lite. Login with username pi and password raspberry . To setup a temporary WiFi configuration (this is not necessary if using an ethernet cable to access the internet is an option) run sudo raspi-config and select \"Network Options\" then \"Wi-fi\". Select the region, enter an SSID and password for the network to connect to. After connecting to a network (either ethernet or wifi) run the following commands. sudo apt install git git clone https://gitlab.com/larsfp/rpi-readonly.git cd rpi-readonly sudo ./setup.sh Do an apt update when prompted. When the script completes reboot. After rebooting you will need to go back into read/write mode. Run the following command to do so the continue with the reset of the setup. Remember that after every reboot during the setup root will need to be remounted read/write. The script will add an alias for this To remount read/write run rw To make readonly again run ro Initial Raspbian Setup Remove the SD Card from your PC and insert it in the Raspberry Pi. Connect the power cable and wait for the pi to boot. The first boot may take a minute or two. To change the hostname and password for the pi user run the following command. sudo raspi-config To change the user password select \"Change User Password\" and enter \"arpirobot\" without the quotes when prompted. To change the hostname select \"Network Options\" then choose \"Hostname\". Change the hostname to \"ArPiRobot-Robot\" when prompted. Note: if using a different hostname make sure to change it in the dnsmasq config file later and make sure the case matches. Under \"Localization Options\" change disable en_GB.UTF8 and enable en_US.UTF8. Make en_US.UTF8 the default locale. Optinally also change the timezone under \"Localization Options\". The default used for ArPiRobot images is United States Eastern Time (New York time). After changing the hostname, password, locale, and timezone select Finish and choose \"Yes\" when asked to reboot. After rebooting change the keyboard layout (still under \"Localization Options\") to \"Generic 105 Key\" > \"Other\" > \"English (US)\" > \"English (US)\". Keep all other settings default. Remember to make the pi writable first! Next goto \"Advanced Configuration\" and change the default resolution to 1280x720 (helps to prevent HDMI flickering issues). Enable Interfaces Run sudo raspi-config Under \"Interfacing Options\" enable SPI and I2C. Upgrade software Make sure you are still connected to a network and run sudo apt update && sudo apt upgrade Then reboot sudo reboot Remote Login (SSH) To enable the SSH server for remote login access (if not already done by the file on the boot partition) run sudo raspi-config again and select \"Interfacing Options\" then select \"SSH\" and choose \"Yes\" to enable. Then, select \"Finish\". Wireless Setup WARNING: If setting the image up over a network (SSH) make sure not to reboot until all the following configuration is completed and verified!!! Install ArPiRobot Raspbian Tools The Raspiban Tools contains several helper scripts that manage networking. Install the raspbian tools before proceding. cd ~ git clone git@github.com:MB3hel/ArPiRobot-RaspbianTools.git cd ArPiRobot-RaspbianTools chmod +x install.sh sudo ./install.sh Run the start script on boot Edit /etc/rc.local and add the following line before exit 0 /usr/local/bin/wifistart.sh Install Other Required Software sudo apt install hostapd dnsmasq Hostapd is used to host the access point and dnsmasq is a DNS and DHCP server. Configuration The virtual adapter and all networking services will be created/started in the correct order by the arpirobot-networking service installed with the Raspbian tools. Setup Dnsmasq and Hostapd Edit /etc/dnsmasq.conf . Replace the contents with the following interface=lo,ap0 server=8.8.8.8 domain-needed bogus-priv dhcp-range=192.168.10.2,192.168.10.10,255.255.255.0,24h Create /etc/hostapd/hostapd.conf with the following contents channel=11 ssid=AP_SSID wpa_passphrase=AP_PASSWORD interface=ap0 hw_mode=g macaddr_acl=0 auth_algs=1 wpa=2 wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP driver=nl80211 Edit /etc/default/hostapd and change the DAEMON_CONF line to DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" Edit /etc/dhcpcd.conf . Add the following to the end of the file interface ap0 static ip_address=192.168.10.1 nohook wpa_supplicant Finally to fix dnsmasq on readonly file system add the following line to /etc/fstab tmpfs /var/lib/misc tmpfs nosuid,nodev 0 0 Setup Client network For now, use a real network here. Once the setup is completed change this to a dummy network so real wifi credentials are not being distributed. Edit /etc/wpa_supplicant/wpa_supplicant.conf . Replace its contents with the following ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"YOUR_SSID_HERE\" psk=\"YOUR_PASS_HERE\" } Configure Services Disable networking services at boot as the custom arpirobot-networking service will handle starting them in the correct order sudo systemctl stop hostapd sudo systemctl stop dnsmasq sudo systemctl stop dhcpcd sudo systemctl disable hostapd sudo systemctl disable dnsmasq sudo systemctl disable dhcpcd sudo systemctl unmask hostapd Reboot and make sure both interfaces come up. If both interfaces come up successfully it should be safe to work remotely after this point. No more network configuration will be done. Installing Software Python and Python Libraries Run the following command to install Python 3 (arpirobot does not support python2). sudo apt install python3 python3-pip python3-setuptools python3-wheel To install required python libraries run the following command. A list of all required libraries is kept up to date in the requirements.txt file in the PythonLib repository. sudo pip3 install [SPACE SEPARATED LIST OF LIBRARIES HERE] Install the ArPiRobot Python Library git clone git@bitbucket.org:MB3hel/arpirobot-pythonlib.git cd arpirobot-pythonlib sudo python3 setup.py install Setting up directory structure for arpirobot programs mkdir ~/arpirobot Test the Image Put the simple test program from the pythonlib samples into the arpirobot folder and set the filename in main.txt . Reboot, then connect with DS and make sure it is working correctly. Cleanup Remove any git keys that were added to the system or any passwords that were saved with a credential manager. Remove the real wifi settings from /etc/wpa_supplicant/wpa_supplicant.conf ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"DUMMY_NETWORK\" psk=\"DUMMY_PASSWORD\" } Clear bash history history -c sudo history -c","title":"Building an ArPiRobot Image"},{"location":"advanced/buildminimage/#building-an-arpirobot-image","text":"This guide details how the prebuilt minimal Raspbian image is created for ArPiRobot robots. This guide exists mostly to document the image creation process, but can be followed to create a custom Raspbian image or an image with another Linux OS. The minimal image configured should be used when development will not be done on the robot or when the robot may be powered off unexpectedly.","title":"Building an ArPiRobot Image"},{"location":"advanced/buildminimage/#why-a-custom-image","text":"There are few reasons to ever need a custom image. Most users do not need to spend the time creating their own image. The most common reasons for wanting to build a custom image are: If you want to use or test a newer version of Raspbian that the prebuilt image uses. If you want to use a different Linux OS (not Raspbian). If you want to understand more about how all the components of this project fit together. It is important to be aware that this guide is only up to date for the version of Raspbian that was used to make the prebuilt image. There will likely be slight differences if using another version of Raspbian or another Linux OS. Some important things to remember if using another Linux OS: there must be a pi user (or systemd services must be edited) and the pi user (or whatever user is used with the deploy tool) must be able to use sudo with no password.","title":"Why a Custom Image?"},{"location":"advanced/buildminimage/#raspbian-version","text":"This guide is currently up to data for Raspbian Lite version 2019-04-09. The resulting image has been tested on a Raspberry Pi Zero W and a Raspberry Pi 3A+.","title":"Raspbian Version"},{"location":"advanced/buildminimage/#base-raspbian-install","text":"Download the Raspbian Image from here . If the correct version is no longer available it is likely OK to use a newer version, but older images can be found here . Download and install balenaEtcher Install balenaEtcher Insert the SD Card into an SD Card slot on your PC or connect it using a USB adapter. Run balenaEtcher Select the downloaded raspbian image Select the destination SD Card Click flash and wait for it to finish Once it finishes remove and re-insert the card to mount the boot partition. Edit the config.txt file and add the following line at the end. This will enable the serial console which can help with setup of the image and with debugging robot code or network issues while in use on a robot. enable_uart=1 Finally, move the SD Card into the Pi, connect keyboard, mouse, monitor and power on the pi.","title":"Base Raspbian Install"},{"location":"advanced/buildminimage/#automatic-process","text":"Instead of following the instructions below, the work-in-progress configuration scripts can be used, but make sure to double check them! Once done with the scripts be sure to delete the downloaded/cloned repo. Also make sure to run each and every script and in order . If something goes wrong you will likely have to start over. After running the scripts it is recommeded to delete the github repo for the scripts (from /home/pi ) and to delete the log files from /root/ . After doing so clear bash history again. To view the script log (live) sudo tail -f /root/setup_log.txt Everything that follows is the manual setup instructions.","title":"Automatic process"},{"location":"advanced/buildminimage/#readonly-filesystem","text":"Tested using commit 1b596c2ced2a6ad87347cbb8faa675f20ec7af52 of rpi-readonly project. The readonly filesystem should be configured on a clean install of Raspbian Lite. Login with username pi and password raspberry . To setup a temporary WiFi configuration (this is not necessary if using an ethernet cable to access the internet is an option) run sudo raspi-config and select \"Network Options\" then \"Wi-fi\". Select the region, enter an SSID and password for the network to connect to. After connecting to a network (either ethernet or wifi) run the following commands. sudo apt install git git clone https://gitlab.com/larsfp/rpi-readonly.git cd rpi-readonly sudo ./setup.sh Do an apt update when prompted. When the script completes reboot. After rebooting you will need to go back into read/write mode. Run the following command to do so the continue with the reset of the setup. Remember that after every reboot during the setup root will need to be remounted read/write. The script will add an alias for this To remount read/write run rw To make readonly again run ro","title":"Readonly Filesystem"},{"location":"advanced/buildminimage/#initial-raspbian-setup","text":"Remove the SD Card from your PC and insert it in the Raspberry Pi. Connect the power cable and wait for the pi to boot. The first boot may take a minute or two. To change the hostname and password for the pi user run the following command. sudo raspi-config To change the user password select \"Change User Password\" and enter \"arpirobot\" without the quotes when prompted. To change the hostname select \"Network Options\" then choose \"Hostname\". Change the hostname to \"ArPiRobot-Robot\" when prompted. Note: if using a different hostname make sure to change it in the dnsmasq config file later and make sure the case matches. Under \"Localization Options\" change disable en_GB.UTF8 and enable en_US.UTF8. Make en_US.UTF8 the default locale. Optinally also change the timezone under \"Localization Options\". The default used for ArPiRobot images is United States Eastern Time (New York time). After changing the hostname, password, locale, and timezone select Finish and choose \"Yes\" when asked to reboot. After rebooting change the keyboard layout (still under \"Localization Options\") to \"Generic 105 Key\" > \"Other\" > \"English (US)\" > \"English (US)\". Keep all other settings default. Remember to make the pi writable first! Next goto \"Advanced Configuration\" and change the default resolution to 1280x720 (helps to prevent HDMI flickering issues).","title":"Initial Raspbian Setup"},{"location":"advanced/buildminimage/#enable-interfaces","text":"Run sudo raspi-config Under \"Interfacing Options\" enable SPI and I2C.","title":"Enable Interfaces"},{"location":"advanced/buildminimage/#upgrade-software","text":"Make sure you are still connected to a network and run sudo apt update && sudo apt upgrade Then reboot sudo reboot","title":"Upgrade software"},{"location":"advanced/buildminimage/#remote-login-ssh","text":"To enable the SSH server for remote login access (if not already done by the file on the boot partition) run sudo raspi-config again and select \"Interfacing Options\" then select \"SSH\" and choose \"Yes\" to enable. Then, select \"Finish\".","title":"Remote Login (SSH)"},{"location":"advanced/buildminimage/#wireless-setup","text":"WARNING: If setting the image up over a network (SSH) make sure not to reboot until all the following configuration is completed and verified!!!","title":"Wireless Setup"},{"location":"advanced/buildminimage/#install-arpirobot-raspbian-tools","text":"The Raspiban Tools contains several helper scripts that manage networking. Install the raspbian tools before proceding. cd ~ git clone git@github.com:MB3hel/ArPiRobot-RaspbianTools.git cd ArPiRobot-RaspbianTools chmod +x install.sh sudo ./install.sh","title":"Install ArPiRobot Raspbian Tools"},{"location":"advanced/buildminimage/#run-the-start-script-on-boot","text":"Edit /etc/rc.local and add the following line before exit 0 /usr/local/bin/wifistart.sh","title":"Run the start script on boot"},{"location":"advanced/buildminimage/#install-other-required-software","text":"sudo apt install hostapd dnsmasq Hostapd is used to host the access point and dnsmasq is a DNS and DHCP server.","title":"Install Other Required Software"},{"location":"advanced/buildminimage/#configuration","text":"The virtual adapter and all networking services will be created/started in the correct order by the arpirobot-networking service installed with the Raspbian tools.","title":"Configuration"},{"location":"advanced/buildminimage/#setup-dnsmasq-and-hostapd","text":"Edit /etc/dnsmasq.conf . Replace the contents with the following interface=lo,ap0 server=8.8.8.8 domain-needed bogus-priv dhcp-range=192.168.10.2,192.168.10.10,255.255.255.0,24h Create /etc/hostapd/hostapd.conf with the following contents channel=11 ssid=AP_SSID wpa_passphrase=AP_PASSWORD interface=ap0 hw_mode=g macaddr_acl=0 auth_algs=1 wpa=2 wpa_key_mgmt=WPA-PSK wpa_pairwise=TKIP rsn_pairwise=CCMP driver=nl80211 Edit /etc/default/hostapd and change the DAEMON_CONF line to DAEMON_CONF=\"/etc/hostapd/hostapd.conf\" Edit /etc/dhcpcd.conf . Add the following to the end of the file interface ap0 static ip_address=192.168.10.1 nohook wpa_supplicant Finally to fix dnsmasq on readonly file system add the following line to /etc/fstab tmpfs /var/lib/misc tmpfs nosuid,nodev 0 0","title":"Setup Dnsmasq and Hostapd"},{"location":"advanced/buildminimage/#setup-client-network","text":"For now, use a real network here. Once the setup is completed change this to a dummy network so real wifi credentials are not being distributed. Edit /etc/wpa_supplicant/wpa_supplicant.conf . Replace its contents with the following ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"YOUR_SSID_HERE\" psk=\"YOUR_PASS_HERE\" }","title":"Setup Client network"},{"location":"advanced/buildminimage/#configure-services","text":"Disable networking services at boot as the custom arpirobot-networking service will handle starting them in the correct order sudo systemctl stop hostapd sudo systemctl stop dnsmasq sudo systemctl stop dhcpcd sudo systemctl disable hostapd sudo systemctl disable dnsmasq sudo systemctl disable dhcpcd sudo systemctl unmask hostapd Reboot and make sure both interfaces come up. If both interfaces come up successfully it should be safe to work remotely after this point. No more network configuration will be done.","title":"Configure Services"},{"location":"advanced/buildminimage/#installing-software","text":"","title":"Installing Software"},{"location":"advanced/buildminimage/#python-and-python-libraries","text":"Run the following command to install Python 3 (arpirobot does not support python2). sudo apt install python3 python3-pip python3-setuptools python3-wheel To install required python libraries run the following command. A list of all required libraries is kept up to date in the requirements.txt file in the PythonLib repository. sudo pip3 install [SPACE SEPARATED LIST OF LIBRARIES HERE]","title":"Python and Python Libraries"},{"location":"advanced/buildminimage/#install-the-arpirobot-python-library","text":"git clone git@bitbucket.org:MB3hel/arpirobot-pythonlib.git cd arpirobot-pythonlib sudo python3 setup.py install","title":"Install the ArPiRobot Python Library"},{"location":"advanced/buildminimage/#setting-up-directory-structure-for-arpirobot-programs","text":"mkdir ~/arpirobot","title":"Setting up directory structure for arpirobot programs"},{"location":"advanced/buildminimage/#test-the-image","text":"Put the simple test program from the pythonlib samples into the arpirobot folder and set the filename in main.txt . Reboot, then connect with DS and make sure it is working correctly.","title":"Test the Image"},{"location":"advanced/buildminimage/#cleanup","text":"Remove any git keys that were added to the system or any passwords that were saved with a credential manager. Remove the real wifi settings from /etc/wpa_supplicant/wpa_supplicant.conf ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 country=US network={ ssid=\"DUMMY_NETWORK\" psk=\"DUMMY_PASSWORD\" } Clear bash history history -c sudo history -c","title":"Cleanup"},{"location":"advanced/imagefromsd/","text":"Making an Image From an SD Card Linux The image will be made using dd , but first the partitions on the SD card need to be shrunk to the smallest possible size. Use gparted to shrink the root partition on the SD Card. Check the sector size and the end of the last partition sudo fdisk -l /dev/mmcblk0 Output will look similar to Disk /dev/mmcblk0: 29.8 GiB, 32010928128 bytes, 62521344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes <----------------- THIS IS SECTOR SIZE I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x000bd3a3 Device Boot Start End Sectors Size Id Type /dev/mmcblk0p1 8192 3656250 3648059 1.8G e W95 FAT16 (LBA) /dev/mmcblk0p2 3656251 32546815 28890565 13.8G 5 Extended /dev/mmcblk0p5 3661824 3727357 65534 32M 83 Linux /dev/mmcblk0p6 3727360 3868671 141312 69M c W95 FAT32 (LBA) /dev/mmcblk0p7 3874816 32546815 28672000 13.7G 83 Linux <----------------- END SECTOR OF LAST PARITION Sector size = 512 bytes End of last sector = 32546815 For this dd operation will use block size (bs=) of 4M (this is 4 * 1024 * 1024 bytes). So count will be (END_SECTOR * SECTOR_SIZE_IN_BYTES) / (BLOCK_SIZE_IN_BYTES) = blocks count so (512 * 32546815) / (1024 * 1024 * 4) so count is 3972.99987793 or 3973 (always round up) To backup image from card sudo dd bs=4M if=/dev/mmcblk0 of=/mnt/Files/rpi-image.img count=3973 status=progress To backup and gzip at the same time sudo dd bs=4M if=/dev/mmcblk0 count=3973 | gzip > /mnt/Files/rpi-image.img.gz To restore to card sudo dd bs=4M if=/mnt/Files/rpi-image.img of=/dev/mmcblk0 status=progress After restoring to the SD Card expand the root partition to fill the SD Card using gparted.","title":"Image to/from SD Card"},{"location":"advanced/imagefromsd/#making-an-image-from-an-sd-card","text":"","title":"Making an Image From an SD Card"},{"location":"advanced/imagefromsd/#linux","text":"The image will be made using dd , but first the partitions on the SD card need to be shrunk to the smallest possible size. Use gparted to shrink the root partition on the SD Card. Check the sector size and the end of the last partition sudo fdisk -l /dev/mmcblk0 Output will look similar to Disk /dev/mmcblk0: 29.8 GiB, 32010928128 bytes, 62521344 sectors Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes <----------------- THIS IS SECTOR SIZE I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x000bd3a3 Device Boot Start End Sectors Size Id Type /dev/mmcblk0p1 8192 3656250 3648059 1.8G e W95 FAT16 (LBA) /dev/mmcblk0p2 3656251 32546815 28890565 13.8G 5 Extended /dev/mmcblk0p5 3661824 3727357 65534 32M 83 Linux /dev/mmcblk0p6 3727360 3868671 141312 69M c W95 FAT32 (LBA) /dev/mmcblk0p7 3874816 32546815 28672000 13.7G 83 Linux <----------------- END SECTOR OF LAST PARITION Sector size = 512 bytes End of last sector = 32546815 For this dd operation will use block size (bs=) of 4M (this is 4 * 1024 * 1024 bytes). So count will be (END_SECTOR * SECTOR_SIZE_IN_BYTES) / (BLOCK_SIZE_IN_BYTES) = blocks count so (512 * 32546815) / (1024 * 1024 * 4) so count is 3972.99987793 or 3973 (always round up) To backup image from card sudo dd bs=4M if=/dev/mmcblk0 of=/mnt/Files/rpi-image.img count=3973 status=progress To backup and gzip at the same time sudo dd bs=4M if=/dev/mmcblk0 count=3973 | gzip > /mnt/Files/rpi-image.img.gz To restore to card sudo dd bs=4M if=/mnt/Files/rpi-image.img of=/dev/mmcblk0 status=progress After restoring to the SD Card expand the root partition to fill the SD Card using gparted.","title":"Linux"},{"location":"guide/usingminimage/","text":"Using the Minimal Image Configure the Pi To configure the Pi first connect to its WiFi network. It will be called ArPiRobot-RobotAP and the password will be arpirobot123 . Once connected open the Deploy Tool and connect to the robot at the address 192.168.10.1 (default username and password pi and arpirobot should work). Once connected there are a few things to configure. First, have it connect to a WiFi network with internet access. This is done in addition to generating its own network. It will even provide internet access over its own network once it connects to another one with internet access. To connect to a different network goto the WiFi tab and under the \"Other Network\" section enter the name (SSID) and password for a different network. Note: the deploy tool cannot currently connect the pi to a network with no password. Only WPA2 networks are supported You can also at this time change the default name and password for the robot's access point if you want to. When done click Apply. The deploy tool will now be disconnected and WiFi changes will be made. If the robot does not seem to connect to the other network that was specified, just reboot it. You may also want to use the deploy tool at this time to change the robot's hostname (under the \"Other\" tab). Creating a Program When using a robot with the minimal image code will (usually) be developed on another PC. It is therefore necessary to setup said other PC for python development. There are many IDEs that can be used for writing python code, but the simplest and most common is IDLE (installed with python). This guide will use IDEL, however other IDEs can be used too. Installing Python3 and IDLE To install python 3 and IDLE on Windows or macOS use the installers provided here. On Linux or BSD packages are most likely provided. Google it. It is often useful to install the same version of python as is on the Raspberry Pi (3.5.x at the time of writing). When installing on windows make sure to select Customize install and ensure that Pip is installed. Also (on the second customization page) make sure to check \"Add python to environment variables\" and \"Create shortcuts for installed applications\". Once the install completes move on to the next step. Setting Up For ArPiRobot Development A few python libraries are required for ArPiRobot and some others are recommended . It is a good idea to install all of these or IDLE may give you error messages that would not occurr on the robot. The following command will install all required and recommended packages. If you are familiar with virtual environments and how to use them Windows (run in command prompt) python -m pip install apscheduler ansicolors pyserial adafruit-circuitpython-motorkit macOS/Linux (run in terminal) pip3 install apscheduler ansicolors pyserial adafruit-circuitpython-motorkit Next install the ArPiRobot library itself. Goto the github repository and clone the repository or download and extract it as a zip file. Open a command prompt or terminal in that folder and run Windows: python setup.py install macOS/Linux: sudo python3 setup.py install Creating a Program First, create a folder to keep ArPiRobot programs in. For example you could create a folder called ArPiRobotProjects in your documents folder. Next, open IDLE (there should be a shortcut in the start menu on windows and on other OSes running the command idle3 should work). Select File > New File and paste the following contents. from arpirobot.core.logger import * from arpirobot.core.robot import BaseRobot, start_robot class MyRobot(BaseRobot): def robot_started(self): pass def process(self): pass def enabled(self): pass def process_enabled(self): pass def disabled(self): pass def process_disabled(self): pass my_robot = MyRobot() start_robot(my_robot) Since this program does not do anything with any robot devices (motors, sensors, etc) it can actually be run on the computer by clicking Run > Run Module. If there are any errors when doing so make sure all the packages listed above were installed correctly. The robot program can run on any PC (not just a Raspberry Pi) as long as it is not using Raspberry Pi specific hardware (such as motor hats, I2C, SPI, GPIO, etc). You could even connect the drive station to the robot program running on the local PC by using \"localhost\" as the robot address. For more infomation on the structre of this program see the Programming Guide Deploying The Program To The Robot Now that we have a working program it is time to deploy it to the robot. To do so make sure the robot is powered on. Make sure you are connected to the same network as the robot (either the \"Other network\" it is setup to connect to or the robot's own network). Open the deploy tool and connect to the robot. Under the \"Robot Code\" tab select the project folder (this is the folder that has the example.py program in it). Then select a main script. Choose example.py . Finally, click \"Deploy to Robot\". This will copy the entire contents of the project folder to the robot and configure it to run the main script on boot. It will then start the main script. The code should now be running on the robot. Launch the drive station and try to connect. Make sure the robot address is either set to the hostname or IP address of the robot on your network. Try the enable and disable buttons and look at the robot log panel. You will see the messages from log_info . Other Tasks Changing The Password To change the password for the pi user (this is the same password used to login with the deploy tool) login over SSH. Change the hostname in the following command if necessary. ssh pi@arpirobot-robot Enter the current password then run passwd And enter the required information. Updating Software on the Raspberry Pi Login via SSH (see previous section) and use apt to install or upgrade linux software. Updating ArPiRobot Components Git repos for the python library and Raspbian tools are located in the pi user's home folder. When connected to the internet the git repos for different components can be updated by running the following command in one of the arpirobot-[component] directories. git pull origin master For the python library re-run sudo python setup.py install For the raspbian tools re-run sudo ./install.sh Powering Off or Rebooting As always, the deploy tool can be used (other tab), but as long as the Pi is in Readonly mode (which it will be unless the deploy tool was used to change it since rebooting last) it is safe to unplug at any time. This is true only for the minimal image. The complete image is never readonly!","title":"Using the Minimal Image"},{"location":"guide/usingminimage/#using-the-minimal-image","text":"","title":"Using the Minimal Image"},{"location":"guide/usingminimage/#configure-the-pi","text":"To configure the Pi first connect to its WiFi network. It will be called ArPiRobot-RobotAP and the password will be arpirobot123 . Once connected open the Deploy Tool and connect to the robot at the address 192.168.10.1 (default username and password pi and arpirobot should work). Once connected there are a few things to configure. First, have it connect to a WiFi network with internet access. This is done in addition to generating its own network. It will even provide internet access over its own network once it connects to another one with internet access. To connect to a different network goto the WiFi tab and under the \"Other Network\" section enter the name (SSID) and password for a different network. Note: the deploy tool cannot currently connect the pi to a network with no password. Only WPA2 networks are supported You can also at this time change the default name and password for the robot's access point if you want to. When done click Apply. The deploy tool will now be disconnected and WiFi changes will be made. If the robot does not seem to connect to the other network that was specified, just reboot it. You may also want to use the deploy tool at this time to change the robot's hostname (under the \"Other\" tab).","title":"Configure the Pi"},{"location":"guide/usingminimage/#creating-a-program","text":"When using a robot with the minimal image code will (usually) be developed on another PC. It is therefore necessary to setup said other PC for python development. There are many IDEs that can be used for writing python code, but the simplest and most common is IDLE (installed with python). This guide will use IDEL, however other IDEs can be used too.","title":"Creating a Program"},{"location":"guide/usingminimage/#installing-python3-and-idle","text":"To install python 3 and IDLE on Windows or macOS use the installers provided here. On Linux or BSD packages are most likely provided. Google it. It is often useful to install the same version of python as is on the Raspberry Pi (3.5.x at the time of writing). When installing on windows make sure to select Customize install and ensure that Pip is installed. Also (on the second customization page) make sure to check \"Add python to environment variables\" and \"Create shortcuts for installed applications\". Once the install completes move on to the next step.","title":"Installing Python3 and IDLE"},{"location":"guide/usingminimage/#setting-up-for-arpirobot-development","text":"A few python libraries are required for ArPiRobot and some others are recommended . It is a good idea to install all of these or IDLE may give you error messages that would not occurr on the robot. The following command will install all required and recommended packages. If you are familiar with virtual environments and how to use them Windows (run in command prompt) python -m pip install apscheduler ansicolors pyserial adafruit-circuitpython-motorkit macOS/Linux (run in terminal) pip3 install apscheduler ansicolors pyserial adafruit-circuitpython-motorkit Next install the ArPiRobot library itself. Goto the github repository and clone the repository or download and extract it as a zip file. Open a command prompt or terminal in that folder and run Windows: python setup.py install macOS/Linux: sudo python3 setup.py install","title":"Setting Up For ArPiRobot Development"},{"location":"guide/usingminimage/#creating-a-program_1","text":"First, create a folder to keep ArPiRobot programs in. For example you could create a folder called ArPiRobotProjects in your documents folder. Next, open IDLE (there should be a shortcut in the start menu on windows and on other OSes running the command idle3 should work). Select File > New File and paste the following contents. from arpirobot.core.logger import * from arpirobot.core.robot import BaseRobot, start_robot class MyRobot(BaseRobot): def robot_started(self): pass def process(self): pass def enabled(self): pass def process_enabled(self): pass def disabled(self): pass def process_disabled(self): pass my_robot = MyRobot() start_robot(my_robot) Since this program does not do anything with any robot devices (motors, sensors, etc) it can actually be run on the computer by clicking Run > Run Module. If there are any errors when doing so make sure all the packages listed above were installed correctly. The robot program can run on any PC (not just a Raspberry Pi) as long as it is not using Raspberry Pi specific hardware (such as motor hats, I2C, SPI, GPIO, etc). You could even connect the drive station to the robot program running on the local PC by using \"localhost\" as the robot address. For more infomation on the structre of this program see the Programming Guide","title":"Creating a Program"},{"location":"guide/usingminimage/#deploying-the-program-to-the-robot","text":"Now that we have a working program it is time to deploy it to the robot. To do so make sure the robot is powered on. Make sure you are connected to the same network as the robot (either the \"Other network\" it is setup to connect to or the robot's own network). Open the deploy tool and connect to the robot. Under the \"Robot Code\" tab select the project folder (this is the folder that has the example.py program in it). Then select a main script. Choose example.py . Finally, click \"Deploy to Robot\". This will copy the entire contents of the project folder to the robot and configure it to run the main script on boot. It will then start the main script. The code should now be running on the robot. Launch the drive station and try to connect. Make sure the robot address is either set to the hostname or IP address of the robot on your network. Try the enable and disable buttons and look at the robot log panel. You will see the messages from log_info .","title":"Deploying The Program To The Robot"},{"location":"guide/usingminimage/#other-tasks","text":"","title":"Other Tasks"},{"location":"guide/usingminimage/#changing-the-password","text":"To change the password for the pi user (this is the same password used to login with the deploy tool) login over SSH. Change the hostname in the following command if necessary. ssh pi@arpirobot-robot Enter the current password then run passwd And enter the required information.","title":"Changing The Password"},{"location":"guide/usingminimage/#updating-software-on-the-raspberry-pi","text":"Login via SSH (see previous section) and use apt to install or upgrade linux software.","title":"Updating Software on the Raspberry Pi"},{"location":"guide/usingminimage/#updating-arpirobot-components","text":"Git repos for the python library and Raspbian tools are located in the pi user's home folder. When connected to the internet the git repos for different components can be updated by running the following command in one of the arpirobot-[component] directories. git pull origin master For the python library re-run sudo python setup.py install For the raspbian tools re-run sudo ./install.sh","title":"Updating ArPiRobot Components"},{"location":"guide/usingminimage/#powering-off-or-rebooting","text":"As always, the deploy tool can be used (other tab), but as long as the Pi is in Readonly mode (which it will be unless the deploy tool was used to change it since rebooting last) it is safe to unplug at any time. This is true only for the minimal image. The complete image is never readonly!","title":"Powering Off or Rebooting"},{"location":"reference/arduinosensors/","text":"Arduino Coprocessor and Sensors Coming soon...","title":"Arduino Coprocessor and Sensors"},{"location":"reference/arduinosensors/#arduino-coprocessor-and-sensors","text":"Coming soon...","title":"Arduino Coprocessor and Sensors"},{"location":"reference/components/","text":"Descriptions of Components Raspberry Pi Image Downloads are available on the downloads page Built using scripts available on GitHub This is the modified version of Raspbian (the official Raspberry Pi OS) with required software for ArPiRobot robots. This contains an initial version of ArPiRobot Pythonlib and ArPiRobot Raspbian Tools, but future updates may chagne which versions are used. While ArPiRobot software can be updated with the Distribution updates (described below), it is sometimes necessary to make changes to the OS itself. If this becomes necessary new Raspberry Pi Images will be released. ArPiRobot Pythonlib Source code available on GitHub The python library for ArPiRobot robot code. ArPiRobot Raspbian Tools Source code available on GitHub Configuration and tools used to run and configure robot programs. ArPiRobot Drive Station Source code available on GitHub The PC-side control software for ArPiRobot robots. ArPiRobot Deploy Tool Source code available on GitHub The PC-side configuration software for ArPiRobot robots. ArPiRobot Arduino Firmware Source code available on GitHub The program to run on an Arduino co-processor for ArPiRobot robots. ArPiRobot Updates The Update Packager repository contains the install script used with updates. The contents of the updates themselves are the Python Library and the Raspbian tools. An update to ArPiRobot Raspbian Tools, ArPiRobot Pythonlib, and python libraries for the Raspberry Pi. Corresponding updates are also provided for the development computer (ArPiRobot Pythonlib only). ArPiRobot Visual Studio Code Extension Source code available on GitHub Enables creating ArPiRobot projects in VSCode.","title":"ArPiRobot Components"},{"location":"reference/components/#descriptions-of-components","text":"","title":"Descriptions of Components"},{"location":"reference/components/#raspberry-pi-image","text":"Downloads are available on the downloads page Built using scripts available on GitHub This is the modified version of Raspbian (the official Raspberry Pi OS) with required software for ArPiRobot robots. This contains an initial version of ArPiRobot Pythonlib and ArPiRobot Raspbian Tools, but future updates may chagne which versions are used. While ArPiRobot software can be updated with the Distribution updates (described below), it is sometimes necessary to make changes to the OS itself. If this becomes necessary new Raspberry Pi Images will be released.","title":"Raspberry Pi Image"},{"location":"reference/components/#arpirobot-pythonlib","text":"Source code available on GitHub The python library for ArPiRobot robot code.","title":"ArPiRobot Pythonlib"},{"location":"reference/components/#arpirobot-raspbian-tools","text":"Source code available on GitHub Configuration and tools used to run and configure robot programs.","title":"ArPiRobot Raspbian Tools"},{"location":"reference/components/#arpirobot-drive-station","text":"Source code available on GitHub The PC-side control software for ArPiRobot robots.","title":"ArPiRobot Drive Station"},{"location":"reference/components/#arpirobot-deploy-tool","text":"Source code available on GitHub The PC-side configuration software for ArPiRobot robots.","title":"ArPiRobot Deploy Tool"},{"location":"reference/components/#arpirobot-arduino-firmware","text":"Source code available on GitHub The program to run on an Arduino co-processor for ArPiRobot robots.","title":"ArPiRobot Arduino Firmware"},{"location":"reference/components/#arpirobot-updates","text":"The Update Packager repository contains the install script used with updates. The contents of the updates themselves are the Python Library and the Raspbian tools. An update to ArPiRobot Raspbian Tools, ArPiRobot Pythonlib, and python libraries for the Raspberry Pi. Corresponding updates are also provided for the development computer (ArPiRobot Pythonlib only).","title":"ArPiRobot Updates"},{"location":"reference/components/#arpirobot-visual-studio-code-extension","text":"Source code available on GitHub Enables creating ArPiRobot projects in VSCode.","title":"ArPiRobot Visual Studio Code Extension"},{"location":"reference/hardware/","text":"Supported Hardware About Vendors Most of the time we provide links to components that can be bought from Adafruit or are easily found on Amazon . Occasionalyy, parts may not be available from these sites (or may be hard to find or not competitivly priced) so there are sometimes other sites used. Banggood - Stocks many items to be purchased online. Similar to Amazon, but slow shipping from China. If you are after cheap for many of the items on the \"Other\" list, look here. DFRobot - Provide good kits and selection of components, but shipping costs are high. Robotshop - Stock many components, including many DFRobot motors with cheaper shipping. Arduino Store - This is sometimes the only place to easily find some boards. Supported Raspberry Pi's Any raspberry Pi with a WiFi adapter should work. While it is theoretically possible to use a USB WiFi adapter it would likely involve making changes to the WiFi configuration scripts and is not recommended. Raspberry Pi Model Image Version Tested Raspberry Pi Zero W Beta1 Raspberry Pi 3 Model A+ Beta1 Supported Arduino Coprocessors Any Arduino compatible board, that can be interfaced with the Raspberry Pi via UART (be it by pins or by USB) should work. Be aware that some Arduinos are 5V devices and some are 3.3V devices (if USB is used to supply power it will always be 5V so there will be 5V power available, but the arduino itself won't use 5V logic levels). Some sensors require 5V power, but can use a 3.3V logic level; and some sensors only support a 5V logic level. Some 3.3V devices have I/O pins that are 5V tolerant (such as the Teensy 3.2) so they can work with most 5V devices. A logic level shifter could also be used. There are also many Arduino clone boards available, and often times they are not obviously clones on listings online (such as on Amazon). Some clones (the ones that are obviously not Arduino brand products) are good quality, but others are not. Be careful where you buy things from. The table below is just the boards that have been tested and are known to work. Arduino Board Voltage Description Product Link (Can find other sellers) Arduino Nano 5V Small footprint, same features as Arduino Uno Arduino Store Arduino Nano Every 5V Same size and footprint as Arduino Nano, but newer and cheaper. For use on a breadboard make sure to get the variant with headers. Arduino Store Sainsmart Nano v3 5V Sainsmart Arduino Nano clone. Cheaper, uses different FTDI chip, but usually works as intended. There were reports of devices with \"counterfit\" FTDI chips being bricked by a windows driver in 2014, but the driver no longer does this. There are also two versions of this board: a blue one and a black one. I linked the blue one here because the black ones seem to becoming harder to find. Sainsmart Store , Amazon Teensy 3.2 3.3V, I/O Pins 5V Tolerant Powerful microcontroller with a small form factor. More powerful than many other Arduino compatible boards with a similar form-factor. Adafruit Supported Motor Drivers Currrently motor drivers are all connected to the Raspberry Pi. The arduino is not currently used as a motor driver. Motor Driver Connection Type Number of Motors Logic Voltage Motor Voltage Max Current per Motor Notes Link Adafruit DRV8833 Module GPIO/PWM with jumper wires 2 2.7V min, motor voltage max 2.7V - 10.8V 1.2A Adafruit Store Adafruit TB6612 Module GPIO/PWM with jumper wires 2 2.7V-5V 4.5V - 13.5V 1.2A Does not come with terminal block power input header. Adafruit Store L298N Module GPIO/PWM with jumper wires 2 2.7-7V 5V-12V 2A Motor voltage can be up to 35V, but onboard 5V regulator cannot be used (remove jumper). An external 5V supply will be required. There is a ~1V drop between motor battery voltage and voltage applied to motors with this module. Amazon Adafruit Motor Hat Pi GPIO Header (hat) I 2 C 4 3.3V I 2 C 4.5V-13.5V 1.2A Uses TB6612 chips, but communicates with Pi via I 2 C, so there is no need for software PWM. It comes with a standard header, but it is recommended to buy and use Adafruit's stacking header so other I/O pins are accessible. Adafruit Store Geekworm Motor Hat Pi GPIO Header (hat) I 2 C 4 3.3V I 2 C 4.5V-13.5V 1.2A Claims to use TB6612, but mine did not. Used different driver with current limiting issues that lead to hat thermal shutoff happening easily for larger robots. Seems to be lower quality \"copy\" of Adafruit's Hat. Amazon Supported Raspberry Pi Sensors Most sensors require an arduino either due to timing, sensor communication requirements, or voltage requirements. Some however, work well with a Raspberry Pi and are easier to use without involving the Arduino. Sensor Description Link Adafruit INA260 Voltage, Current Sensor Measures motor battery voltage and current consumption of motors. Communicates with Pi via I 2 C. Provides more acurate voltage readings than a voltage divider does with the arduino and provides current readings. Adafruit Store Supported Arduino Sensors Sensor Type Sensor Description Link(s) Rotary Encoders Any encoder with a single data line (single channel encoders). Can be used to determine distance traveled or speed, but cannot distinguish between directions. Commonly made with slotted disks and photo interrupters. TT Motor Disk , Photo Interrupter Old Adafruit 9DOF IMU No longer sold. Legacy component. Gyro, accelerometer, and magnetometer combo board. Adafruit Store Adafruit NXP 9DOF IMU Support coming soon. Newer gyro, accelerometer, and magnetometer combo board. Adafruit Store 4-Pin Ultrasonic Sensors Ultrasonic sensors with trigger and echo pins. Most common is HC-SR04, which is 5V only. There are other compatible devices that work at 3.3V though. Standard HC-SR04 , 5V/3V Compatible Device Analog Input Voltage Monitor Using an analog input to measure motor battery voltage, usually through a votage divider. Can assemble on breadboard with through hole resistors or buy pre-assembled voltage divider. Voltage Divider Module Motors Item Description/Notes Link(s) TT Motor Most common motor option. It is cheap and well-tested. Gear ratio is 1:48. Many kits come with these. Adafruit Angled TT Motor These are not often used, but some kits do use them. Gear ratio is 1:120 RobotShop , DFRobot High Torque TT Motor Same shape as standard TT Motor, but 1:120 gear ratio. These are hard to find. Banggood High Torque TT Motor w/ Quad Encoder Same as high torque TT motor (1:120 gear ratio), but with builtin quadrature encoder. RobotShop , DFRobot Angled TT Motor w/ Quad Encoder Same as angled TT Motor (1:120 gear ratio), but had builtin quadrature encoder. RobotShop , DFRobot Kit bases/chasis Item Description/Notes Link(s) Acrylic 2WD Acrylic 2 wheel drive robot, with caster wheel. Amazon Acrylic 4WD Acrylic 4 wheel drive robot. Dual layer. Amazon DFRobot Pirate 4WD Aluminum, high quality, dual layer, 4-wheel drive robot chasis. RobotShop , DFRobot Other Components and Tools Item Purpose Description/Notes Link(s) Velcro Attach components to robot Can be used to mount Raspberry Pi, breadboards, motor drivers, etc. Amazon Twist Ties Cable Management Plastic ones hold up better than paper ones. Amazon Solder Iron Kit Attach leads to motors, mount header pins, repair work, etc. The linked product is a simple soldering kit. Better irons do exist, but this should be good enough for many simple tasks. Amazon Multimeter Measurement and debugging The linked product is a simple multimeter, but will work for simple tasks. Amazon Wire Stripper Removing insulation from wires Linked item on amazon also works as a crimper for some connectors. Amazon Jumper Wires (Preassembled) Connections to header pins and breadboard Assorted pack [Amazon] (https://www.amazon.com/diymore-120Pcs-Dupont-40-Pin-Female/dp/B01K4K3WKK/ref=sr_1_20?keywords=dupont+jumper+wire&qid=1570914352&s=toys-and-games&sr=1-20) Wire Motor leads, make jumpers 24AWG is a good size for jumper wires Amazon Mini Breadboard Hold arduino and sensors. Wiring. Mini breadboard does not leave much room for anythin but arduino. Adafruit Half Size Breadboard Hold arduino and sensors. Wiring. Half sized breadboard will fit on larger robots. Adafruit Male .1\" Header Pins Use on arduino or sensor. Often come with parts, but sometimes more are necessary. Adafruit Logic Level Shifter Convert between logic levels (ex 3.3V and 5V) Can find similar cheaper in packs of 5-10 on amazon if you need multiple. Adafruit Dupont Kit Making jumper wires This kit comes with many housings, male and female, pins. Amazon Dupont Crimper Crimp dupont connectors (ex. for jumper wire) There are cheaper crimpers, but not all work very well. Amazon 5x AA holder Hold batteries These are hard to find Amazon (not prime) , Amazon (5 pack) , Adafruit (Connector on end) 6x AA holder Hold batteries These use a 9V style header Amazon (2 pack) Manel Mount Switch Main power switch These can be mounted with hot glue. Adafruit Breadboard compatible switch Main power switch These sit in a breadboard Adafruit Hot glue gun Mount some (non-PCB) components. Amazon","title":"Supported Hardware"},{"location":"reference/hardware/#supported-hardware","text":"","title":"Supported Hardware"},{"location":"reference/hardware/#about-vendors","text":"Most of the time we provide links to components that can be bought from Adafruit or are easily found on Amazon . Occasionalyy, parts may not be available from these sites (or may be hard to find or not competitivly priced) so there are sometimes other sites used. Banggood - Stocks many items to be purchased online. Similar to Amazon, but slow shipping from China. If you are after cheap for many of the items on the \"Other\" list, look here. DFRobot - Provide good kits and selection of components, but shipping costs are high. Robotshop - Stock many components, including many DFRobot motors with cheaper shipping. Arduino Store - This is sometimes the only place to easily find some boards.","title":"About Vendors"},{"location":"reference/hardware/#supported-raspberry-pis","text":"Any raspberry Pi with a WiFi adapter should work. While it is theoretically possible to use a USB WiFi adapter it would likely involve making changes to the WiFi configuration scripts and is not recommended. Raspberry Pi Model Image Version Tested Raspberry Pi Zero W Beta1 Raspberry Pi 3 Model A+ Beta1","title":"Supported Raspberry Pi's"},{"location":"reference/hardware/#supported-arduino-coprocessors","text":"Any Arduino compatible board, that can be interfaced with the Raspberry Pi via UART (be it by pins or by USB) should work. Be aware that some Arduinos are 5V devices and some are 3.3V devices (if USB is used to supply power it will always be 5V so there will be 5V power available, but the arduino itself won't use 5V logic levels). Some sensors require 5V power, but can use a 3.3V logic level; and some sensors only support a 5V logic level. Some 3.3V devices have I/O pins that are 5V tolerant (such as the Teensy 3.2) so they can work with most 5V devices. A logic level shifter could also be used. There are also many Arduino clone boards available, and often times they are not obviously clones on listings online (such as on Amazon). Some clones (the ones that are obviously not Arduino brand products) are good quality, but others are not. Be careful where you buy things from. The table below is just the boards that have been tested and are known to work. Arduino Board Voltage Description Product Link (Can find other sellers) Arduino Nano 5V Small footprint, same features as Arduino Uno Arduino Store Arduino Nano Every 5V Same size and footprint as Arduino Nano, but newer and cheaper. For use on a breadboard make sure to get the variant with headers. Arduino Store Sainsmart Nano v3 5V Sainsmart Arduino Nano clone. Cheaper, uses different FTDI chip, but usually works as intended. There were reports of devices with \"counterfit\" FTDI chips being bricked by a windows driver in 2014, but the driver no longer does this. There are also two versions of this board: a blue one and a black one. I linked the blue one here because the black ones seem to becoming harder to find. Sainsmart Store , Amazon Teensy 3.2 3.3V, I/O Pins 5V Tolerant Powerful microcontroller with a small form factor. More powerful than many other Arduino compatible boards with a similar form-factor. Adafruit","title":"Supported Arduino Coprocessors"},{"location":"reference/hardware/#supported-motor-drivers","text":"Currrently motor drivers are all connected to the Raspberry Pi. The arduino is not currently used as a motor driver. Motor Driver Connection Type Number of Motors Logic Voltage Motor Voltage Max Current per Motor Notes Link Adafruit DRV8833 Module GPIO/PWM with jumper wires 2 2.7V min, motor voltage max 2.7V - 10.8V 1.2A Adafruit Store Adafruit TB6612 Module GPIO/PWM with jumper wires 2 2.7V-5V 4.5V - 13.5V 1.2A Does not come with terminal block power input header. Adafruit Store L298N Module GPIO/PWM with jumper wires 2 2.7-7V 5V-12V 2A Motor voltage can be up to 35V, but onboard 5V regulator cannot be used (remove jumper). An external 5V supply will be required. There is a ~1V drop between motor battery voltage and voltage applied to motors with this module. Amazon Adafruit Motor Hat Pi GPIO Header (hat) I 2 C 4 3.3V I 2 C 4.5V-13.5V 1.2A Uses TB6612 chips, but communicates with Pi via I 2 C, so there is no need for software PWM. It comes with a standard header, but it is recommended to buy and use Adafruit's stacking header so other I/O pins are accessible. Adafruit Store Geekworm Motor Hat Pi GPIO Header (hat) I 2 C 4 3.3V I 2 C 4.5V-13.5V 1.2A Claims to use TB6612, but mine did not. Used different driver with current limiting issues that lead to hat thermal shutoff happening easily for larger robots. Seems to be lower quality \"copy\" of Adafruit's Hat. Amazon","title":"Supported Motor Drivers"},{"location":"reference/hardware/#supported-raspberry-pi-sensors","text":"Most sensors require an arduino either due to timing, sensor communication requirements, or voltage requirements. Some however, work well with a Raspberry Pi and are easier to use without involving the Arduino. Sensor Description Link Adafruit INA260 Voltage, Current Sensor Measures motor battery voltage and current consumption of motors. Communicates with Pi via I 2 C. Provides more acurate voltage readings than a voltage divider does with the arduino and provides current readings. Adafruit Store","title":"Supported Raspberry Pi Sensors"},{"location":"reference/hardware/#supported-arduino-sensors","text":"Sensor Type Sensor Description Link(s) Rotary Encoders Any encoder with a single data line (single channel encoders). Can be used to determine distance traveled or speed, but cannot distinguish between directions. Commonly made with slotted disks and photo interrupters. TT Motor Disk , Photo Interrupter Old Adafruit 9DOF IMU No longer sold. Legacy component. Gyro, accelerometer, and magnetometer combo board. Adafruit Store Adafruit NXP 9DOF IMU Support coming soon. Newer gyro, accelerometer, and magnetometer combo board. Adafruit Store 4-Pin Ultrasonic Sensors Ultrasonic sensors with trigger and echo pins. Most common is HC-SR04, which is 5V only. There are other compatible devices that work at 3.3V though. Standard HC-SR04 , 5V/3V Compatible Device Analog Input Voltage Monitor Using an analog input to measure motor battery voltage, usually through a votage divider. Can assemble on breadboard with through hole resistors or buy pre-assembled voltage divider. Voltage Divider Module","title":"Supported Arduino Sensors"},{"location":"reference/hardware/#motors","text":"Item Description/Notes Link(s) TT Motor Most common motor option. It is cheap and well-tested. Gear ratio is 1:48. Many kits come with these. Adafruit Angled TT Motor These are not often used, but some kits do use them. Gear ratio is 1:120 RobotShop , DFRobot High Torque TT Motor Same shape as standard TT Motor, but 1:120 gear ratio. These are hard to find. Banggood High Torque TT Motor w/ Quad Encoder Same as high torque TT motor (1:120 gear ratio), but with builtin quadrature encoder. RobotShop , DFRobot Angled TT Motor w/ Quad Encoder Same as angled TT Motor (1:120 gear ratio), but had builtin quadrature encoder. RobotShop , DFRobot","title":"Motors"},{"location":"reference/hardware/#kit-baseschasis","text":"Item Description/Notes Link(s) Acrylic 2WD Acrylic 2 wheel drive robot, with caster wheel. Amazon Acrylic 4WD Acrylic 4 wheel drive robot. Dual layer. Amazon DFRobot Pirate 4WD Aluminum, high quality, dual layer, 4-wheel drive robot chasis. RobotShop , DFRobot","title":"Kit bases/chasis"},{"location":"reference/hardware/#other-components-and-tools","text":"Item Purpose Description/Notes Link(s) Velcro Attach components to robot Can be used to mount Raspberry Pi, breadboards, motor drivers, etc. Amazon Twist Ties Cable Management Plastic ones hold up better than paper ones. Amazon Solder Iron Kit Attach leads to motors, mount header pins, repair work, etc. The linked product is a simple soldering kit. Better irons do exist, but this should be good enough for many simple tasks. Amazon Multimeter Measurement and debugging The linked product is a simple multimeter, but will work for simple tasks. Amazon Wire Stripper Removing insulation from wires Linked item on amazon also works as a crimper for some connectors. Amazon Jumper Wires (Preassembled) Connections to header pins and breadboard Assorted pack [Amazon] (https://www.amazon.com/diymore-120Pcs-Dupont-40-Pin-Female/dp/B01K4K3WKK/ref=sr_1_20?keywords=dupont+jumper+wire&qid=1570914352&s=toys-and-games&sr=1-20) Wire Motor leads, make jumpers 24AWG is a good size for jumper wires Amazon Mini Breadboard Hold arduino and sensors. Wiring. Mini breadboard does not leave much room for anythin but arduino. Adafruit Half Size Breadboard Hold arduino and sensors. Wiring. Half sized breadboard will fit on larger robots. Adafruit Male .1\" Header Pins Use on arduino or sensor. Often come with parts, but sometimes more are necessary. Adafruit Logic Level Shifter Convert between logic levels (ex 3.3V and 5V) Can find similar cheaper in packs of 5-10 on amazon if you need multiple. Adafruit Dupont Kit Making jumper wires This kit comes with many housings, male and female, pins. Amazon Dupont Crimper Crimp dupont connectors (ex. for jumper wire) There are cheaper crimpers, but not all work very well. Amazon 5x AA holder Hold batteries These are hard to find Amazon (not prime) , Amazon (5 pack) , Adafruit (Connector on end) 6x AA holder Hold batteries These use a 9V style header Amazon (2 pack) Manel Mount Switch Main power switch These can be mounted with hot glue. Adafruit Breadboard compatible switch Main power switch These sit in a breadboard Adafruit Hot glue gun Mount some (non-PCB) components. Amazon","title":"Other Components and Tools"},{"location":"reference/media/","text":"Media on Robots Playing Audio Coming soon... TODO: Maybe Camera stream Camera record Audio record","title":"Media on Robots"},{"location":"reference/media/#media-on-robots","text":"","title":"Media on Robots"},{"location":"reference/media/#playing-audio","text":"Coming soon...","title":"Playing Audio"},{"location":"reference/media/#todo-maybe","text":"Camera stream Camera record Audio record","title":"TODO: Maybe"},{"location":"reference/motors/","text":"Using Motors Coming soon...","title":"Motors"},{"location":"reference/motors/#using-motors","text":"Coming soon...","title":"Using Motors"},{"location":"reference/nettable/","text":"Network Table Coming soon...","title":"Network Table"},{"location":"reference/nettable/#network-table","text":"Coming soon...","title":"Network Table"},{"location":"reference/robotclasses/","text":"Robot Classes BaseRobot Coming soon... PeriodicRobot Coming soon...","title":"Robot Classes"},{"location":"reference/robotclasses/#robot-classes","text":"","title":"Robot Classes"},{"location":"reference/robotclasses/#baserobot","text":"Coming soon...","title":"BaseRobot"},{"location":"reference/robotclasses/#periodicrobot","text":"Coming soon...","title":"PeriodicRobot"},{"location":"reference/sensors/","text":"Raspberry Pi Sensors Coming soon...","title":"Raspberry Pi Sensors"},{"location":"reference/sensors/#raspberry-pi-sensors","text":"Coming soon...","title":"Raspberry Pi Sensors"},{"location":"setup/createproject/","text":"Create a Simple Robot Project Using Visual Studio Code If the ArPiRobot Visual Studio Code extension is installed it is easy to create an ArPiRobot project. Open the command pallete (the default shortcut for this is Ctrl+Shift+P on a PC or Command+Shift+P on a mac). Search for ArPiRobot. Choose \"Create ArPiRobot Project\". In the first dialog that shows up choose the folder to create the project in (it will have its own subfolder). Then you will be prompted to enter the name of the project. VSCode will then create the project and open it. By default there will be one python file called robot.py . Open it. Once opened VSCode will (if the python extension is installed) have a few options along the bottom bar, one of which allows selecting a python installation. Click it and choose the python install that was setup for ArPiRobot. You may be prompted (by a message in the bottom right corner) to install pylint. Do so as it allows error detection in VSCode. To deploy the code to the robot the Deploy Tool is used. First, connect your computer to the Robot's WiFi network. Open the Deploy Tool and connect to the robot. Under the Robot Code tab there are two file selectors. First you must select a project folder (this is the folder created by VSCode that has robot.py in it). Then, you need to select a main script. The main script is the python file that is run on the robot. In this case, there is only one python file: robot.py so choose it. Note that the main script must be located in the selected project folder. Once everything is selected click Deploy to Robot and wait for the deploy operation to finish (the Deploy Tool will show a dialog when complete). To make sure code is running select the Other tab and load the launch log. You should see something in the text box. If nothing is visible try again after about 30 seconds (sometimes, especially on the Pi Zero, starting the robot program takes some time). There should either be log info indicating that the robot code is running, or if it failed there will be a description of the error. If the default project does not run it is likely that you did not install any ArPiRobot update on the robot. Once the code is running open the drive station and connect it to the robot. Not Using Visual Studio Code If you are using another IDE (or no IDE), there is nothing special about the project. You must have a root project folder containing one or more python files (optionally in subfolders).","title":"Create a Simple Robot Project"},{"location":"setup/createproject/#create-a-simple-robot-project","text":"","title":"Create a Simple Robot Project"},{"location":"setup/createproject/#using-visual-studio-code","text":"If the ArPiRobot Visual Studio Code extension is installed it is easy to create an ArPiRobot project. Open the command pallete (the default shortcut for this is Ctrl+Shift+P on a PC or Command+Shift+P on a mac). Search for ArPiRobot. Choose \"Create ArPiRobot Project\". In the first dialog that shows up choose the folder to create the project in (it will have its own subfolder). Then you will be prompted to enter the name of the project. VSCode will then create the project and open it. By default there will be one python file called robot.py . Open it. Once opened VSCode will (if the python extension is installed) have a few options along the bottom bar, one of which allows selecting a python installation. Click it and choose the python install that was setup for ArPiRobot. You may be prompted (by a message in the bottom right corner) to install pylint. Do so as it allows error detection in VSCode. To deploy the code to the robot the Deploy Tool is used. First, connect your computer to the Robot's WiFi network. Open the Deploy Tool and connect to the robot. Under the Robot Code tab there are two file selectors. First you must select a project folder (this is the folder created by VSCode that has robot.py in it). Then, you need to select a main script. The main script is the python file that is run on the robot. In this case, there is only one python file: robot.py so choose it. Note that the main script must be located in the selected project folder. Once everything is selected click Deploy to Robot and wait for the deploy operation to finish (the Deploy Tool will show a dialog when complete). To make sure code is running select the Other tab and load the launch log. You should see something in the text box. If nothing is visible try again after about 30 seconds (sometimes, especially on the Pi Zero, starting the robot program takes some time). There should either be log info indicating that the robot code is running, or if it failed there will be a description of the error. If the default project does not run it is likely that you did not install any ArPiRobot update on the robot. Once the code is running open the drive station and connect it to the robot.","title":"Using Visual Studio Code"},{"location":"setup/createproject/#not-using-visual-studio-code","text":"If you are using another IDE (or no IDE), there is nothing special about the project. You must have a root project folder containing one or more python files (optionally in subfolders).","title":"Not Using Visual Studio Code"},{"location":"setup/devsetup/","text":"Setup your Computer There are several tools used to write ArPiRobot code on your computer, deploy code to and configure the robot, and control the robot. Installing Python ArPiRobot code is written in python using the ArPiRobot python library, so we must first install python. Windows The easiest way to install a specific python version on windows (along with pip and configuring your path) is by using a command line package manager called Scoop . This will allow programs to be installed on windows as packages (much as is done on most Linux systems). Follow the instructions on Scoop's Website to install scoop. Then run the commands below in a powershell window. scoop install git scoop bucket add versions To install python for only the current user scoop install python35 To install python for all users scoop install -g python35 Note: In the above examples python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used). macOS The easiest way to install a specific python version on macos (and ensure that all required libraries are available and up to date) is by using a tool called pyenv, which can be installed with Homebrew (a command line package manager for macOS). Follow the instructions on Homebrew's page to install homebrew. Then follow the process below to install pyenv and use it to build and install a specific python version. First install required libraries brew install openssl readline sqlite3 xz zlib Then install pyenv brew install pyenv Then build and install a specific python version pyenv install -v 3.5 Note: In the above example python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used). Linux / *BSD The process of installing a specific python version will vary with Linux distributions (or BSD OSes). Pyenv should be able to be used. Just google instructions. Ubuntu Ubuntu users can use a ppa repo providing many python versions. sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.5 This will install python35 and pip35 executables. Note: In the above example python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used). Installing Visual Studio Code There are many development environments for writing python code, but for ArPiRobot we will focus on Visual Studio Code (VSCode). It provides intelligent code suggestions and error detection, and there is an ArPiRobot extension for VSCode that can help create projects. Download and install VSCode from https://code.visualstudio.com/ . After installing it, open VSCode. A few extensions will be required/helpful. First, install Microsoft's Python extension. Then download the ArPiRobot VSCode Extension (see the downloads page ). Once you've downloaded the vsix file open VSCode's extensions pane (left side). Click the three dots menu button in the top right of the extensions pane. Choose install form VSIX and choose the downloaded VSIX file. Installing the Drive Station and Deploy Tool Windows Download the exe installers for both (see downloads page ). Run the installer. A Java runtime will be installed with each program. The installer will create a start menu shortcut (and optionally a Desktop shortcut) as well. macOS Download the .zip macOS packages (see downloads page ). Extract the zip files and move the resulting .app files to the Applications folder. Each app comes with its own Java runtime. Other This method will work on any platform where Java is available (Linux, *BSD, Windows, macOS, etc). First install Java 11+. Then download the .jar files (see downloads page ). Most of the time, if Java is installed, double clicking the .jar file will run the program. If not, the command below can be used java -jar /full/path/to/jar/file.jar","title":"Setup your Computer"},{"location":"setup/devsetup/#setup-your-computer","text":"There are several tools used to write ArPiRobot code on your computer, deploy code to and configure the robot, and control the robot.","title":"Setup your Computer"},{"location":"setup/devsetup/#installing-python","text":"ArPiRobot code is written in python using the ArPiRobot python library, so we must first install python.","title":"Installing Python"},{"location":"setup/devsetup/#windows","text":"The easiest way to install a specific python version on windows (along with pip and configuring your path) is by using a command line package manager called Scoop . This will allow programs to be installed on windows as packages (much as is done on most Linux systems). Follow the instructions on Scoop's Website to install scoop. Then run the commands below in a powershell window. scoop install git scoop bucket add versions To install python for only the current user scoop install python35 To install python for all users scoop install -g python35 Note: In the above examples python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used).","title":"Windows"},{"location":"setup/devsetup/#macos","text":"The easiest way to install a specific python version on macos (and ensure that all required libraries are available and up to date) is by using a tool called pyenv, which can be installed with Homebrew (a command line package manager for macOS). Follow the instructions on Homebrew's page to install homebrew. Then follow the process below to install pyenv and use it to build and install a specific python version. First install required libraries brew install openssl readline sqlite3 xz zlib Then install pyenv brew install pyenv Then build and install a specific python version pyenv install -v 3.5 Note: In the above example python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used).","title":"macOS"},{"location":"setup/devsetup/#linux-bsd","text":"The process of installing a specific python version will vary with Linux distributions (or BSD OSes). Pyenv should be able to be used. Just google instructions. Ubuntu Ubuntu users can use a ppa repo providing many python versions. sudo add-apt-repository ppa:deadsnakes/ppa sudo apt update sudo apt install python3.5 This will install python35 and pip35 executables. Note: In the above example python 3.5 is installed. Make sure to install the same version of python which is used on the robot (this is based on the Raspberry Pi Image used).","title":"Linux / *BSD"},{"location":"setup/devsetup/#installing-visual-studio-code","text":"There are many development environments for writing python code, but for ArPiRobot we will focus on Visual Studio Code (VSCode). It provides intelligent code suggestions and error detection, and there is an ArPiRobot extension for VSCode that can help create projects. Download and install VSCode from https://code.visualstudio.com/ . After installing it, open VSCode. A few extensions will be required/helpful. First, install Microsoft's Python extension. Then download the ArPiRobot VSCode Extension (see the downloads page ). Once you've downloaded the vsix file open VSCode's extensions pane (left side). Click the three dots menu button in the top right of the extensions pane. Choose install form VSIX and choose the downloaded VSIX file.","title":"Installing Visual Studio Code"},{"location":"setup/devsetup/#installing-the-drive-station-and-deploy-tool","text":"","title":"Installing the Drive Station and Deploy Tool"},{"location":"setup/devsetup/#windows_1","text":"Download the exe installers for both (see downloads page ). Run the installer. A Java runtime will be installed with each program. The installer will create a start menu shortcut (and optionally a Desktop shortcut) as well.","title":"Windows"},{"location":"setup/devsetup/#macos_1","text":"Download the .zip macOS packages (see downloads page ). Extract the zip files and move the resulting .app files to the Applications folder. Each app comes with its own Java runtime.","title":"macOS"},{"location":"setup/devsetup/#other","text":"This method will work on any platform where Java is available (Linux, *BSD, Windows, macOS, etc). First install Java 11+. Then download the .jar files (see downloads page ). Most of the time, if Java is installed, double clicking the .jar file will run the program. If not, the command below can be used java -jar /full/path/to/jar/file.jar","title":"Other"},{"location":"setup/setuppi/","text":"Setup the Raspberry Pi ArPiRobot robots are made functional with a variety of components. The collection of these components is refered to as an ArPiRobot version. Certain versions of each component below must be used with each ArPiRobot version. Requirements Before starting you will need a computer with a WiFi adapter, a supported Raspberry Pi , a power supply for the Raspberry Pi (this can be a 2A or greater USB power adapter, a 2A or greater battery pack, etc), a micro SD card (at least 8GB), and a way to connect the micro SD card to your computer. Choosing an Image It is always recommended to use the latest ArPiRobot image, a list of which is availbe on the downloads . Flash the Image To start, download the newest Raspberry Pi image.. This image contains a modified versoin of Raspbian, the official Raspberry Pi OS. It has tools, libraries, and programs pre-installed to allow it to work with ArPiRobot robot code. After downloading the image (which will be a .zip file) it needs to be extracted from the compressed (zipped) folder before other programs can use it. The compressed folder ( .zip file) will look similar to the image below in Windows explorer. To extract the image right click it and select \"Extract all...\" and click \"Extract\" on the dialog that pops up. After extracting there will be a normal (uncompressed) folder. The one that does not end in .zip is the normal folder. Inside this folder there is the image file ( .img ). The Raspberry Pi loads the OS form a micro SD Card, so the image must be written to a micro SD Card. To do so, we will use balenaEtcher . Download and run it. You should see a screen like the one below. Choose select image and choose the ArPiRobot image file ( .img ) from the uncompressed folder. Then connect your micro SD card to your computer. Choose select target and choose the micro SD Card. Click flash and wait until it completes. Put the SD Card in the Raspbery Pi and power it on. The activity light (green) should start blinking, indicating that the Pi is booting. Wait for it to finish booting (about 30-60 seconds). Once the Pi boots it will be generating a WiFi network called \"ArPiRobot-Robot\" with a password of \"arpirobot123\". This network is how we will interface with the Raspberry Pi later.","title":"Setup the Raspberry Pi"},{"location":"setup/setuppi/#setup-the-raspberry-pi","text":"ArPiRobot robots are made functional with a variety of components. The collection of these components is refered to as an ArPiRobot version. Certain versions of each component below must be used with each ArPiRobot version.","title":"Setup the Raspberry Pi"},{"location":"setup/setuppi/#requirements","text":"Before starting you will need a computer with a WiFi adapter, a supported Raspberry Pi , a power supply for the Raspberry Pi (this can be a 2A or greater USB power adapter, a 2A or greater battery pack, etc), a micro SD card (at least 8GB), and a way to connect the micro SD card to your computer.","title":"Requirements"},{"location":"setup/setuppi/#choosing-an-image","text":"It is always recommended to use the latest ArPiRobot image, a list of which is availbe on the downloads .","title":"Choosing an Image"},{"location":"setup/setuppi/#flash-the-image","text":"To start, download the newest Raspberry Pi image.. This image contains a modified versoin of Raspbian, the official Raspberry Pi OS. It has tools, libraries, and programs pre-installed to allow it to work with ArPiRobot robot code. After downloading the image (which will be a .zip file) it needs to be extracted from the compressed (zipped) folder before other programs can use it. The compressed folder ( .zip file) will look similar to the image below in Windows explorer. To extract the image right click it and select \"Extract all...\" and click \"Extract\" on the dialog that pops up. After extracting there will be a normal (uncompressed) folder. The one that does not end in .zip is the normal folder. Inside this folder there is the image file ( .img ). The Raspberry Pi loads the OS form a micro SD Card, so the image must be written to a micro SD Card. To do so, we will use balenaEtcher . Download and run it. You should see a screen like the one below. Choose select image and choose the ArPiRobot image file ( .img ) from the uncompressed folder. Then connect your micro SD card to your computer. Choose select target and choose the micro SD Card. Click flash and wait until it completes. Put the SD Card in the Raspbery Pi and power it on. The activity light (green) should start blinking, indicating that the Pi is booting. Wait for it to finish booting (about 30-60 seconds). Once the Pi boots it will be generating a WiFi network called \"ArPiRobot-Robot\" with a password of \"arpirobot123\". This network is how we will interface with the Raspberry Pi later.","title":"Flash the Image"},{"location":"setup/updating/","text":"Installing Updates About Updates It is always necessary to install an ArPiRobot Robot update after flashing the image to the SD Card to ensure that the latest version of the ArPiRobot Python Library is installed on the robot. When downloading updates make sure to download an update that supports the version of the ArPiRobot image you are using (the latest update should always support the latest image). In addition to Robot updates there are also Development Environment updates. Robot updates are packaged differently and contain multiple components and python dependencies that will work only on the robot. Development environment updates use the same python library version, but are intended to be installed on your development computer and require that the development computer be connected to the internet while installing. For each update you should make sure to install the robot update to the robot and the development environment update on your development computer(s). If the same update version is not used on both there may be false errors detected on your computer, or errors on the robot that your computer did not know about. Robot Updates After downloading the Robot Update zip file to your computer, open the Deploy Tool. Connect your computer to the Robot's WiFi then click connect in the Deploy Tool. Once connected, select the updates tab, choose the downloaded update zip file, and apply the update to the robot using the deploy tool. Development Environment Updates After downloading the Development Environment Update to your computer, extract the zip file. Once extracted there will be several files, including some install scripts ( install-win.bat , macos-install.command , and linux-install.sh ). If pip3 is in your PATH and is for the correct python installation, just run the script. To use a different pip command edit the install script.","title":"Installing Updates"},{"location":"setup/updating/#installing-updates","text":"","title":"Installing Updates"},{"location":"setup/updating/#about-updates","text":"It is always necessary to install an ArPiRobot Robot update after flashing the image to the SD Card to ensure that the latest version of the ArPiRobot Python Library is installed on the robot. When downloading updates make sure to download an update that supports the version of the ArPiRobot image you are using (the latest update should always support the latest image). In addition to Robot updates there are also Development Environment updates. Robot updates are packaged differently and contain multiple components and python dependencies that will work only on the robot. Development environment updates use the same python library version, but are intended to be installed on your development computer and require that the development computer be connected to the internet while installing. For each update you should make sure to install the robot update to the robot and the development environment update on your development computer(s). If the same update version is not used on both there may be false errors detected on your computer, or errors on the robot that your computer did not know about.","title":"About Updates"},{"location":"setup/updating/#robot-updates","text":"After downloading the Robot Update zip file to your computer, open the Deploy Tool. Connect your computer to the Robot's WiFi then click connect in the Deploy Tool. Once connected, select the updates tab, choose the downloaded update zip file, and apply the update to the robot using the deploy tool.","title":"Robot Updates"},{"location":"setup/updating/#development-environment-updates","text":"After downloading the Development Environment Update to your computer, extract the zip file. Once extracted there will be several files, including some install scripts ( install-win.bat , macos-install.command , and linux-install.sh ). If pip3 is in your PATH and is for the correct python installation, just run the script. To use a different pip command edit the install script.","title":"Development Environment Updates"}]}